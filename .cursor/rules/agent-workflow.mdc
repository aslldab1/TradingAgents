---
globs: tradingagents/agents/**/*.py,tradingagents/graph/**/*.py
description: 代理工作流和协作机制指南
---

# TradingAgents 代理工作流和协作机制

## 代理工作流架构

### 核心工作流组件
基于LangGraph构建的多代理协作系统，位于 [tradingagents/graph/](mdc:tradingagents/graph/) 目录：

- **主控制器**: [TradingAgentsGraph](mdc:tradingagents/graph/trading_graph.py) - 协调整个工作流
- **图构建器**: [GraphSetup](mdc:tradingagents/graph/setup.py) - 构建代理协作图
- **条件逻辑**: [ConditionalLogic](mdc:tradingagents/graph/conditional_logic.py) - 控制流程分支
- **信号传播**: [Propagator](mdc:tradingagents/graph/propagation.py) - 处理代理间通信
- **信号处理**: [SignalProcessor](mdc:tradingagents/graph/signal_processing.py) - 分析和处理交易信号

## 代理团队结构

### 1. 分析师团队 (Analysts)
位于 [tradingagents/agents/analysts/](mdc:tradingagents/agents/analysts/) 目录：

#### 基本面分析师
- **文件**: [fundamentals_analyst.py](mdc:tradingagents/agents/analysts/fundamentals_analyst.py)
- **职责**: 分析公司财务数据、基本面指标、内部交易
- **工具**: 财务数据获取、公司概况分析、内部人员情绪分析

#### 市场分析师  
- **文件**: [market_analyst.py](mdc:tradingagents/agents/analysts/market_analyst.py)
- **职责**: 技术分析、市场趋势、价格模式识别
- **工具**: 技术指标计算、价格数据分析、市场趋势分析

#### 新闻分析师
- **文件**: [news_analyst.py](mdc:tradingagents/agents/analysts/news_analyst.py)
- **职责**: 监控全球新闻、宏观经济指标、事件影响分析
- **工具**: 新闻数据获取、事件影响评估、宏观趋势分析

#### 社交媒体分析师
- **文件**: [social_media_analyst.py](mdc:tradingagents/agents/analysts/social_media_analyst.py)
- **职责**: 分析社交媒体情绪、公众观点、市场情绪
- **工具**: Reddit数据获取、情绪分析、社交媒体趋势

### 2. 研究团队 (Researchers)
位于 [tradingagents/agents/researchers/](mdc:tradingagents/agents/researchers/) 目录：

#### 看涨研究员
- **文件**: [bull_researcher.py](mdc:tradingagents/agents/researchers/bull_researcher.py)
- **职责**: 积极评估投资机会、寻找看涨理由
- **特点**: 乐观视角、机会导向、风险承受能力强

#### 看跌研究员
- **文件**: [bear_researcher.py](mdc:tradingagents/agents/researchers/bear_researcher.py)
- **职责**: 批判性评估风险、寻找看跌理由
- **特点**: 谨慎视角、风险导向、保守分析

#### 研究经理
- **文件**: [research_manager.py](mdc:tradingagents/agents/managers/research_manager.py)
- **职责**: 协调研究团队、整合各方观点、形成综合报告
- **特点**: 平衡视角、决策导向、综合分析

### 3. 交易和风险管理团队

#### 交易员
- **文件**: [trader.py](mdc:tradingagents/agents/trader/trader.py)
- **职责**: 基于研究结果制定具体交易策略
- **特点**: 执行导向、策略制定、时机把握

#### 风险经理
- **文件**: [risk_manager.py](mdc:tradingagents/agents/managers/risk_manager.py)
- **职责**: 评估投资风险、调整交易策略
- **特点**: 风险控制、策略调整、安全导向

#### 风险辩论者
位于 [tradingagents/agents/risk_mgmt/](mdc:tradingagents/agents/risk_mgmt/) 目录：
- **激进辩论者**: [aggresive_debator.py](mdc:tradingagents/agents/risk_mgmt/aggresive_debator.py)
- **保守辩论者**: [conservative_debator.py](mdc:tradingagents/agents/risk_mgmt/conservative_debator.py)
- **中性辩论者**: [neutral_debator.py](mdc:tradingagents/agents/risk_mgmt/neutral_debator.py)

## 工作流执行流程

### 1. 初始化阶段
```python
# 创建交易图实例
ta = TradingAgentsGraph(
    selected_analysts=["market", "social", "news", "fundamentals"],
    debug=True,
    config=config
)
```

### 2. 数据收集阶段
各分析师代理并行收集相关数据：
- 市场分析师：技术指标、价格数据
- 新闻分析师：相关新闻、宏观事件
- 社交媒体分析师：情绪数据、讨论热度
- 基本面分析师：财务数据、公司信息

### 3. 分析阶段
各代理基于专业领域进行深度分析：
- 使用专业工具获取数据
- 应用领域专业知识进行分析
- 生成结构化分析报告
- 提供投资建议和风险评估

### 4. 研究辩论阶段
看涨和看跌研究员进行多轮辩论：
- 基于分析师报告进行讨论
- 寻找支持各自观点的证据
- 挑战对方观点和假设
- 通过辩论达到平衡和深度

### 5. 研究整合阶段
研究经理整合各方观点：
- 综合所有分析师报告
- 平衡看涨和看跌观点
- 形成综合研究结论
- 为交易员提供决策依据

### 6. 交易决策阶段
交易员制定具体交易策略：
- 基于研究结论制定策略
- 确定交易时机和规模
- 考虑市场条件和风险
- 生成交易提案

### 7. 风险评估阶段
风险团队评估和调整策略：
- 评估交易提案的风险
- 进行风险-收益分析
- 调整交易参数
- 提供风险控制建议

### 8. 最终决策阶段
投资组合经理做出最终决定：
- 审查交易提案
- 考虑风险控制建议
- 批准或拒绝交易
- 执行交易指令

## 代理间通信机制

### 状态管理
- **状态定义**: [agent_states.py](mdc:tradingagents/agents/utils/agent_states.py)
- **状态类型**: AgentState, InvestDebateState, RiskDebateState
- **状态传递**: 通过LangGraph状态图传递

### 消息传递
- **消息格式**: 标准化的消息结构
- **工具调用**: 代理间工具调用和响应
- **结果传递**: 分析结果在代理间传递

### 记忆系统
- **记忆管理**: [memory.py](mdc:tradingagents/agents/utils/memory.py)
- **记忆类型**: 各代理独立的记忆系统
- **学习机制**: 基于历史经验的改进

## 条件逻辑控制

### 流程控制
- **分析师流程**: 控制各分析师的数据收集和分析
- **辩论流程**: 控制研究员间的辩论轮数
- **风险流程**: 控制风险讨论的深度和广度

### 决策节点
- **继续分析**: 是否需要更多数据或分析
- **进入辩论**: 是否开始研究员辩论
- **风险评估**: 是否需要风险团队介入
- **最终决策**: 是否达到最终决策条件

## 工具集成

### 代理工具
- **工具类**: [agent_utils.py](mdc:tradingagents/agents/utils/agent_utils.py)
- **工具节点**: 为每个代理创建专用工具节点
- **工具绑定**: 将工具绑定到相应的LLM

### 数据工具
- **数据接口**: 统一的数据获取接口
- **工具调用**: 代理通过工具获取数据
- **结果处理**: 工具结果的标准化处理

## 调试和监控

### 调试模式
- **启用调试**: `debug=True` 参数
- **详细日志**: 代理执行过程记录
- **状态跟踪**: 实时状态变化监控

### 性能监控
- **执行时间**: 各代理执行时间统计
- **API调用**: 工具调用次数和成本
- **内存使用**: 系统资源使用情况

## 扩展和定制

### 添加新代理
1. 在相应目录创建代理文件
2. 实现代理的核心功能
3. 在GraphSetup中注册代理
4. 更新条件逻辑控制

### 修改工作流
1. 调整代理执行顺序
2. 修改条件逻辑规则
3. 更新状态传递机制
4. 测试新的工作流程